//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.8.0 (NJsonSchema v10.6.7.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace Sunp.Api.Client {
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.8.0 (NJsonSchema v10.6.7.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SunpApiClient {
        private string _baseUrl = "http://sunp-api.qoldau.kz";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public SunpApiClient(string baseUrl, System.Net.Http.HttpClient httpClient) {
            _baseUrl = baseUrl;
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings() {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Отправка замеров с массовых расходомеров на приеме (слив)
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ResponseBodyBase> DeviceSendFlowmeterInputIndicatorsAsync(SendFlowmeterInputIndicatorsRequestBody requestBody) {
            return DeviceSendFlowmeterInputIndicatorsAsync(requestBody, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Отправка замеров с массовых расходомеров на приеме (слив)
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ResponseBodyBase> DeviceSendFlowmeterInputIndicatorsAsync(SendFlowmeterInputIndicatorsRequestBody requestBody, System.Threading.CancellationToken cancellationToken) {
            if (requestBody == null)
                throw new System.ArgumentNullException("requestBody");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Device/SendFlowmeterInputIndicators");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new System.Net.Http.HttpRequestMessage()) {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(requestBody, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ = await ReadObjectResponseAsync<ResponseBodyBase>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        } else {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    } finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            } finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Отправка замеров с массовых расходомеров на отгрузке (налив)
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ResponseBodyBase> DeviceSendFlowmeterOutputIndicatorsAsync(SendFlowmeterOutputIndicatorsRequestBody requestBody) {
            return DeviceSendFlowmeterOutputIndicatorsAsync(requestBody, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Отправка замеров с массовых расходомеров на отгрузке (налив)
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ResponseBodyBase> DeviceSendFlowmeterOutputIndicatorsAsync(SendFlowmeterOutputIndicatorsRequestBody requestBody, System.Threading.CancellationToken cancellationToken) {
            if (requestBody == null)
                throw new System.ArgumentNullException("requestBody");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Device/SendFlowmeterOutputIndicators");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new System.Net.Http.HttpRequestMessage()) {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(requestBody, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ = await ReadObjectResponseAsync<ResponseBodyBase>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        } else {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    } finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            } finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Получение данных по заявителю
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GetApplicantDataResponseBody> ProviderGetApplicantDataAsync(RequestBodyBase requestBody) {
            return ProviderGetApplicantDataAsync(requestBody, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Получение данных по заявителю
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetApplicantDataResponseBody> ProviderGetApplicantDataAsync(RequestBodyBase requestBody, System.Threading.CancellationToken cancellationToken) {
            if (requestBody == null)
                throw new System.ArgumentNullException("requestBody");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Provider/GetApplicantData");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new System.Net.Http.HttpRequestMessage()) {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(requestBody, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ = await ReadObjectResponseAsync<GetApplicantDataResponseBody>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        } else {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    } finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            } finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Получение статуса обработки пакета данных
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GetPackageStatusResponseBody> ProviderGetPackageStatusAsync(PackageRequestBody requestBody) {
            return ProviderGetPackageStatusAsync(requestBody, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Получение статуса обработки пакета данных
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetPackageStatusResponseBody> ProviderGetPackageStatusAsync(PackageRequestBody requestBody, System.Threading.CancellationToken cancellationToken) {
            if (requestBody == null)
                throw new System.ArgumentNullException("requestBody");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Provider/GetPackageStatus");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new System.Net.Http.HttpRequestMessage()) {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(requestBody, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ = await ReadObjectResponseAsync<GetPackageStatusResponseBody>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        } else {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    } finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            } finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Отправка замеров с резервуаров (хранение)
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ResponseBodyBase> TankSendTankIndicatorsAsync(SendTankIndicatorsRequestBody requestBody) {
            return TankSendTankIndicatorsAsync(requestBody, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Отправка замеров с резервуаров (хранение)
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ResponseBodyBase> TankSendTankIndicatorsAsync(SendTankIndicatorsRequestBody requestBody, System.Threading.CancellationToken cancellationToken) {
            if (requestBody == null)
                throw new System.ArgumentNullException("requestBody");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Tank/SendTankIndicators");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new System.Net.Http.HttpRequestMessage()) {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(requestBody, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ = await ReadObjectResponseAsync<ResponseBodyBase>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        } else {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    } finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            } finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Отправка замеров с резервуаров (поставка)
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ResponseBodyBase> TankSendTankTransfersAsync(SendTankTransfersRequestBody requestBody) {
            return TankSendTankTransfersAsync(requestBody, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Отправка замеров с резервуаров (поставка)
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ResponseBodyBase> TankSendTankTransfersAsync(SendTankTransfersRequestBody requestBody, System.Threading.CancellationToken cancellationToken) {
            if (requestBody == null)
                throw new System.ArgumentNullException("requestBody");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Tank/SendTankTransfers");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new System.Net.Http.HttpRequestMessage()) {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(requestBody, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ = await ReadObjectResponseAsync<ResponseBodyBase>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        } else {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    } finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            } finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T> {
            public ObjectResponseResult(T responseObject, string responseText) {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken) {
            if (response == null || response.Content == null) {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString) {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                } catch (Newtonsoft.Json.JsonException exception) {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            } else {
                try {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader)) {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                } catch (Newtonsoft.Json.JsonException exception) {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo) {
            if (value == null) {
                return "";
            }

            if (value is System.Enum) {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null) {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null) {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null) {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            } else if (value is bool) {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            } else if (value is byte[]) {
                return System.Convert.ToBase64String((byte[])value);
            } else if (value.GetType().IsArray) {
                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.8.0 (NJsonSchema v10.6.7.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateEntityResponseBody : ResponseBodyBase {
        [Newtonsoft.Json.JsonProperty("entityId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? EntityId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.8.0 (NJsonSchema v10.6.7.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResponseBodyBase {
        [Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.Always)]
        public bool Success { get; set; }

        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Error { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.8.0 (NJsonSchema v10.6.7.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateApplicantRequestBody : RequestBodyBase {
        [Newtonsoft.Json.JsonProperty("bin", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Bin { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.8.0 (NJsonSchema v10.6.7.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RequestBodyBase {
        [Newtonsoft.Json.JsonProperty("requestGuid", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"\b[A-Fa-f0-9]{8}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{12}\b")]
        public string RequestGuid { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.8.0 (NJsonSchema v10.6.7.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateObjectRequestBody : RequestBodyBase {
        [Newtonsoft.Json.JsonProperty("applicantId", Required = Newtonsoft.Json.Required.Always)]
        public long ApplicantId { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("objectType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ObjectsType ObjectType { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.8.0 (NJsonSchema v10.6.7.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ObjectsType {

        [System.Runtime.Serialization.EnumMember(Value = @"PetrolStation")]
        PetrolStation = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Refinery")]
        Refinery = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"RefineryLow")]
        RefineryLow = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"OilBase")]
        OilBase = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.8.0 (NJsonSchema v10.6.7.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateTankRequestBody : RequestBodyBase {
        [Newtonsoft.Json.JsonProperty("objectId", Required = Newtonsoft.Json.Required.Always)]
        public long ObjectId { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("oilProductType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OilProductType OilProductType { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.8.0 (NJsonSchema v10.6.7.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OilProductType {

        [System.Runtime.Serialization.EnumMember(Value = @"AI80")]
        AI80 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AI_92")]
        AI_92 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"AI96")]
        AI96 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"DTZ")]
        DTZ = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"DTL")]
        DTL = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"M100")]
        M100 = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"TS1")]
        TS1 = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"DTZK4")]
        DTZK4 = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"FR60205")]
        FR60205 = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"VG")]
        VG = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"VKAI96")]
        VKAI96 = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"BT")]
        BT = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"GC")]
        GC = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"Gn")]
        Gn = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"KB")]
        KB = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"KD")]
        KD = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"KK")]
        KK = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"CL")]
        CL = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"CLG")]
        CLG = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"CLR")]
        CLR = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"CLB")]
        CLB = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"MTBE")]
        MTBE = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"SPBT")]
        SPBT = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"SUG")]
        SUG = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"HOP")]
        HOP = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"FRC5")]
        FRC5 = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"HT")]
        HT = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"DTM")]
        DTM = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"AI95")]
        AI95 = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"AI_95_K4")]
        AI_95_K4 = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"AI_95_K5")]
        AI_95_K5 = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"AI98")]
        AI98 = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"FRAC")]
        FRAC = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"Fuel")]
        Fuel = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"PT")]
        PT = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"Oil")]
        Oil = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"AI_92_K4")]
        AI_92_K4 = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"AI_92_K5")]
        AI_92_K5 = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"AI98_K4")]
        AI98_K4 = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"DTE_K5")]
        DTE_K5 = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"AI_93")]
        AI_93 = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"AI95_K5")]
        AI95_K5 = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"AI98_K5")]
        AI98_K5 = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"DTE_K2")]
        DTE_K2 = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"ZM40")]
        ZM40 = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"ZМ100")]
        ZМ100 = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"AI92_K4")]
        AI92_K4 = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"AI96_K4")]
        AI96_K4 = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"AI95_K4")]
        AI95_K4 = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"DTE")]
        DTE = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"HYDRAZINE")]
        HYDRAZINE = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"NPD")]
        NPD = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"AI76")]
        AI76 = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"DTA")]
        DTA = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"DTZ_K5")]
        DTZ_K5 = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"DTL_K4")]
        DTL_K4 = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"DT_L_K5")]
        DT_L_K5 = 56,

        [System.Runtime.Serialization.EnumMember(Value = @"NULL")]
        NULL = 57,

        [System.Runtime.Serialization.EnumMember(Value = @"G_100")]
        G_100 = 58,

        [System.Runtime.Serialization.EnumMember(Value = @"G_95")]
        G_95 = 59,

        [System.Runtime.Serialization.EnumMember(Value = @"DT_Z_K2")]
        DT_Z_K2 = 60,

        [System.Runtime.Serialization.EnumMember(Value = @"DT_E_K4")]
        DT_E_K4 = 61,

        [System.Runtime.Serialization.EnumMember(Value = @"DT_A_K4")]
        DT_A_K4 = 62,

        [System.Runtime.Serialization.EnumMember(Value = @"DT_XR")]
        DT_XR = 63,

        [System.Runtime.Serialization.EnumMember(Value = @"DT")]
        DT = 64,

        [System.Runtime.Serialization.EnumMember(Value = @"DT_A_K2")]
        DT_A_K2 = 65,

        [System.Runtime.Serialization.EnumMember(Value = @"AI91")]
        AI91 = 66,

        [System.Runtime.Serialization.EnumMember(Value = @"REAKTIVNOE_TOPLIVO")]
        REAKTIVNOE_TOPLIVO = 67,

        [System.Runtime.Serialization.EnumMember(Value = @"EMPTY")]
        EMPTY = 68,

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 69,

        [System.Runtime.Serialization.EnumMember(Value = @"AI100")]
        AI100 = 70,

        [System.Runtime.Serialization.EnumMember(Value = @"DT_A_K5")]
        DT_A_K5 = 71,

        [System.Runtime.Serialization.EnumMember(Value = @"PECHNOE_TOPLIVO_BYTOVOE")]
        PECHNOE_TOPLIVO_BYTOVOE = 72,

        [System.Runtime.Serialization.EnumMember(Value = @"NEFRAS")]
        NEFRAS = 73,

        [System.Runtime.Serialization.EnumMember(Value = @"АВИАЦИОННОЕ_ТОПЛИВО")]
        АВИАЦИОННОЕ_ТОПЛИВО = 74,

        [System.Runtime.Serialization.EnumMember(Value = @"PREM95")]
        PREM95 = 75,

        [System.Runtime.Serialization.EnumMember(Value = @"SUPER98")]
        SUPER98 = 76,

        [System.Runtime.Serialization.EnumMember(Value = @"PRIME95")]
        PRIME95 = 77,

        [System.Runtime.Serialization.EnumMember(Value = @"PRIME98")]
        PRIME98 = 78,

        [System.Runtime.Serialization.EnumMember(Value = @"PRIMEDTL")]
        PRIMEDTL = 79,

        [System.Runtime.Serialization.EnumMember(Value = @"PRIMEDTZ")]
        PRIMEDTZ = 80,

        [System.Runtime.Serialization.EnumMember(Value = @"PRIME92")]
        PRIME92 = 81,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.8.0 (NJsonSchema v10.6.7.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateDeviceRequestBody : RequestBodyBase {
        [Newtonsoft.Json.JsonProperty("objectId", Required = Newtonsoft.Json.Required.Always)]
        public long ObjectId { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("deviceType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DeviceType DeviceType { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.8.0 (NJsonSchema v10.6.7.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DeviceType {

        [System.Runtime.Serialization.EnumMember(Value = @"Undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FlowmeterOutputAvto")]
        FlowmeterOutputAvto = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FlowmeterOutputZhd")]
        FlowmeterOutputZhd = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FlowmeterOutputTube")]
        FlowmeterOutputTube = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FlowmeterInputAvto")]
        FlowmeterInputAvto = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FlowmeterInputZhd")]
        FlowmeterInputZhd = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"FlowmeterInputTube")]
        FlowmeterInputTube = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ElectronicScale")]
        ElectronicScale = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Transfer")]
        Transfer = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.8.0 (NJsonSchema v10.6.7.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GenerateTokenResponseBody : ResponseBodyBase {
        [Newtonsoft.Json.JsonProperty("token", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Token { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.8.0 (NJsonSchema v10.6.7.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GenerateTokenRequest : RequestBodyBase {
        [Newtonsoft.Json.JsonProperty("applicantBin", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ApplicantBin { get; set; }

        [Newtonsoft.Json.JsonProperty("applicantId", Required = Newtonsoft.Json.Required.Always)]
        public long ApplicantId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.8.0 (NJsonSchema v10.6.7.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SendFlowmeterInputIndicatorsRequestBody : PackageRequestBody {
        [Newtonsoft.Json.JsonProperty("flowmetersInputMeasurements", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<FlowmeterInputMeasurements> FlowmetersInputMeasurements { get; set; } = new System.Collections.ObjectModel.Collection<FlowmeterInputMeasurements>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.8.0 (NJsonSchema v10.6.7.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FlowmeterInputMeasurements {
        [Newtonsoft.Json.JsonProperty("deviceId", Required = Newtonsoft.Json.Required.Always)]
        public long DeviceId { get; set; }

        [Newtonsoft.Json.JsonProperty("measurements", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<FlowmeterInputMeasurementData> Measurements { get; set; } = new System.Collections.ObjectModel.Collection<FlowmeterInputMeasurementData>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.8.0 (NJsonSchema v10.6.7.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FlowmeterInputMeasurementData {
        [Newtonsoft.Json.JsonProperty("measurementDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset MeasurementDate { get; set; }

        [Newtonsoft.Json.JsonProperty("totalMass", Required = Newtonsoft.Json.Required.Always)]
        public decimal TotalMass { get; set; }

        [Newtonsoft.Json.JsonProperty("flowMass", Required = Newtonsoft.Json.Required.Always)]
        public decimal FlowMass { get; set; }

        [Newtonsoft.Json.JsonProperty("totalVolume", Required = Newtonsoft.Json.Required.Always)]
        public decimal TotalVolume { get; set; }

        [Newtonsoft.Json.JsonProperty("currentDensity", Required = Newtonsoft.Json.Required.Always)]
        public decimal CurrentDensity { get; set; }

        [Newtonsoft.Json.JsonProperty("currentTemperature", Required = Newtonsoft.Json.Required.Always)]
        public decimal CurrentTemperature { get; set; }

        [Newtonsoft.Json.JsonProperty("oilProductType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OilProductType OilProductType { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.8.0 (NJsonSchema v10.6.7.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PackageRequestBody : RequestBodyBase {
        [Newtonsoft.Json.JsonProperty("packageId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"\b[A-Fa-f0-9]{8}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{12}\b")]
        public string PackageId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.8.0 (NJsonSchema v10.6.7.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SendFlowmeterOutputIndicatorsRequestBody : PackageRequestBody {
        [Newtonsoft.Json.JsonProperty("flowmetersOutputMeasurements", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<FlowmeterOutputMeasurements> FlowmetersOutputMeasurements { get; set; } = new System.Collections.ObjectModel.Collection<FlowmeterOutputMeasurements>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.8.0 (NJsonSchema v10.6.7.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FlowmeterOutputMeasurements {
        [Newtonsoft.Json.JsonProperty("deviceId", Required = Newtonsoft.Json.Required.Always)]
        public long DeviceId { get; set; }

        [Newtonsoft.Json.JsonProperty("measurements", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<FlowmeterOutputMeasurementData> Measurements { get; set; } = new System.Collections.ObjectModel.Collection<FlowmeterOutputMeasurementData>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.8.0 (NJsonSchema v10.6.7.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FlowmeterOutputMeasurementData {
        [Newtonsoft.Json.JsonProperty("measurementDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset MeasurementDate { get; set; }

        [Newtonsoft.Json.JsonProperty("totalMass", Required = Newtonsoft.Json.Required.Always)]
        public decimal TotalMass { get; set; }

        [Newtonsoft.Json.JsonProperty("flowMass", Required = Newtonsoft.Json.Required.Always)]
        public decimal FlowMass { get; set; }

        [Newtonsoft.Json.JsonProperty("totalVolume", Required = Newtonsoft.Json.Required.Always)]
        public decimal TotalVolume { get; set; }

        [Newtonsoft.Json.JsonProperty("currentDensity", Required = Newtonsoft.Json.Required.Always)]
        public decimal CurrentDensity { get; set; }

        [Newtonsoft.Json.JsonProperty("currentTemperature", Required = Newtonsoft.Json.Required.Always)]
        public decimal CurrentTemperature { get; set; }

        [Newtonsoft.Json.JsonProperty("oilProductType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OilProductType OilProductType { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.8.0 (NJsonSchema v10.6.7.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetApplicantDataResponseBody : ResponseBodyBase {
        [Newtonsoft.Json.JsonProperty("applicantData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CollectedApplicantData ApplicantData { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.8.0 (NJsonSchema v10.6.7.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CollectedApplicantData {
        [Newtonsoft.Json.JsonProperty("applicantId", Required = Newtonsoft.Json.Required.Always)]
        public long ApplicantId { get; set; }

        [Newtonsoft.Json.JsonProperty("applicantBin", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ApplicantBin { get; set; }

        [Newtonsoft.Json.JsonProperty("objects", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<CollectedApplicantObject> Objects { get; set; } = new System.Collections.ObjectModel.Collection<CollectedApplicantObject>();

        [Newtonsoft.Json.JsonProperty("tokenNonce", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TokenNonce { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.8.0 (NJsonSchema v10.6.7.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CollectedApplicantObject {
        [Newtonsoft.Json.JsonProperty("objectId", Required = Newtonsoft.Json.Required.Always)]
        public long ObjectId { get; set; }

        [Newtonsoft.Json.JsonProperty("objectType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ObjectsType ObjectType { get; set; }

        [Newtonsoft.Json.JsonProperty("objectName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ObjectName { get; set; }

        [Newtonsoft.Json.JsonProperty("tanks", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<CollectedApplicantTankData> Tanks { get; set; } = new System.Collections.ObjectModel.Collection<CollectedApplicantTankData>();

        [Newtonsoft.Json.JsonProperty("devices", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<CollectedApplicantDeviceData> Devices { get; set; } = new System.Collections.ObjectModel.Collection<CollectedApplicantDeviceData>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.8.0 (NJsonSchema v10.6.7.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CollectedApplicantTankData {
        [Newtonsoft.Json.JsonProperty("tankId", Required = Newtonsoft.Json.Required.Always)]
        public long TankId { get; set; }

        [Newtonsoft.Json.JsonProperty("tankName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TankName { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.8.0 (NJsonSchema v10.6.7.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CollectedApplicantDeviceData {
        [Newtonsoft.Json.JsonProperty("deviceId", Required = Newtonsoft.Json.Required.Always)]
        public long DeviceId { get; set; }

        [Newtonsoft.Json.JsonProperty("deviceName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DeviceName { get; set; }

        [Newtonsoft.Json.JsonProperty("deviceType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DeviceType DeviceType { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.8.0 (NJsonSchema v10.6.7.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetPackageStatusResponseBody : ResponseBodyBase {
        [Newtonsoft.Json.JsonProperty("packageProcessingStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PackageProcessingStatus? PackageProcessingStatus { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.8.0 (NJsonSchema v10.6.7.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PackageProcessingStatus {

        [System.Runtime.Serialization.EnumMember(Value = @"Pending")]
        Pending = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Success")]
        Success = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.8.0 (NJsonSchema v10.6.7.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SendTankIndicatorsRequestBody : PackageRequestBody {
        [Newtonsoft.Json.JsonProperty("tanksMeasurements", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<TankMeasurements> TanksMeasurements { get; set; } = new System.Collections.ObjectModel.Collection<TankMeasurements>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.8.0 (NJsonSchema v10.6.7.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TankMeasurements {
        [Newtonsoft.Json.JsonProperty("tankId", Required = Newtonsoft.Json.Required.Always)]
        public long TankId { get; set; }

        [Newtonsoft.Json.JsonProperty("measurements", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<TankMeasurementData> Measurements { get; set; } = new System.Collections.ObjectModel.Collection<TankMeasurementData>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.8.0 (NJsonSchema v10.6.7.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TankMeasurementData {
        [Newtonsoft.Json.JsonProperty("measurementDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset MeasurementDate { get; set; }

        [Newtonsoft.Json.JsonProperty("mass", Required = Newtonsoft.Json.Required.Always)]
        public decimal Mass { get; set; }

        [Newtonsoft.Json.JsonProperty("volume", Required = Newtonsoft.Json.Required.Always)]
        public decimal Volume { get; set; }

        [Newtonsoft.Json.JsonProperty("level", Required = Newtonsoft.Json.Required.Always)]
        public decimal Level { get; set; }

        [Newtonsoft.Json.JsonProperty("density", Required = Newtonsoft.Json.Required.Always)]
        public decimal Density { get; set; }

        [Newtonsoft.Json.JsonProperty("temperature", Required = Newtonsoft.Json.Required.Always)]
        public decimal Temperature { get; set; }

        [Newtonsoft.Json.JsonProperty("oilProductType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OilProductType OilProductType { get; set; }

        [Newtonsoft.Json.JsonProperty("tankStatus", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TankStatus TankStatus { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.8.0 (NJsonSchema v10.6.7.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TankStatus {

        [System.Runtime.Serialization.EnumMember(Value = @"UnDefined")]
        UnDefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Repair")]
        Repair = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Reception")]
        Reception = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Vacuuming")]
        Vacuuming = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Sucks")]
        Sucks = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.8.0 (NJsonSchema v10.6.7.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SendTankTransfersRequestBody : PackageRequestBody {
        [Newtonsoft.Json.JsonProperty("tanksTransfers", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<TankTransfers> TanksTransfers { get; set; } = new System.Collections.ObjectModel.Collection<TankTransfers>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.8.0 (NJsonSchema v10.6.7.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TankTransfers {
        [Newtonsoft.Json.JsonProperty("tankId", Required = Newtonsoft.Json.Required.Always)]
        public long TankId { get; set; }

        [Newtonsoft.Json.JsonProperty("transfers", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<TankTransferData> Transfers { get; set; } = new System.Collections.ObjectModel.Collection<TankTransferData>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.8.0 (NJsonSchema v10.6.7.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TankTransferData {
        [Newtonsoft.Json.JsonProperty("measurementDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset MeasurementDate { get; set; }

        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset StartDate { get; set; }

        [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset EndDate { get; set; }

        [Newtonsoft.Json.JsonProperty("level", Required = Newtonsoft.Json.Required.Always)]
        public decimal Level { get; set; }

        [Newtonsoft.Json.JsonProperty("mass", Required = Newtonsoft.Json.Required.Always)]
        public decimal Mass { get; set; }

        [Newtonsoft.Json.JsonProperty("volume", Required = Newtonsoft.Json.Required.Always)]
        public decimal Volume { get; set; }

        [Newtonsoft.Json.JsonProperty("density", Required = Newtonsoft.Json.Required.Always)]
        public decimal Density { get; set; }

        [Newtonsoft.Json.JsonProperty("oilProductType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OilProductType OilProductType { get; set; }

    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.8.0 (NJsonSchema v10.6.7.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException : System.Exception {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException) {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString() {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.8.0 (NJsonSchema v10.6.7.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException<TResult> : ApiException {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException) {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore 472
#pragma warning restore 114
#pragma warning restore 108
#pragma warning restore 3016
#pragma warning restore 8603